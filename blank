#!/usr/bin/env python
#-*- coding:utf-8 -*-
#  blank - cli warsi
#

import os
from optparse import OptionParser
from libwarsi import OnPackage
import gettext

gettext.textdomain('blank')
_ = gettext.gettext

class BlankInstall:	
    def install(self, pkgs):
        on = OnPackage()
        for pkg in pkgs:
            if not os.path.isfile(pkg):
                print _('No such file or directory.')
                exit(1)

            if os.path.isfile(pkg):
                if not OnPackage.is_valid(on, pkg):
                    print _('Not valid as BlankOn Package')
                    exit(1)

            info = OnPackage.show_info(on, pkg)

            print _('\nSoftware Name : %s') %info['Package']
            print _('Software Version : %s') %info['Version']
            print _('Architecture : %s') %info['Architecture']
            print _('Information : %s\n') %info['Description']
		
            try:
                comfirm = raw_input(_('Do you want to continue [Y/n]? '))
            except TypeError:
                print _('Input error, Aborted.')
                exit(1)

            if comfirm == "Y" or comfirm == "y":
                self.commit_install(pkg)
            elif comfirm == "N" or comfirm == "n":
                print _('Canceled.')
                exit(1)
            else:
                print _('Aborted.')
                exit(1)

    def check(self, pkgs):
        for pkg in pkgs:
            on = OnPackage()
            try:
                extract = on.extract(pkg)
            except:
                exit(1)

            try:
                checksums = on.check_sums(pkg, extract)
            except:
                exit(1)

            for sum_key in checksums.keys():
                print _('%s Checksum is %s') %sum_key %checksums[sum_key]

    def commit_install(self, pkg):		
        on = OnPackage()
        extract = on.extract(pkg)
        checksums = on.check_sums(pkg, extract)
        versions = on.check_version_all(pkg, extract)

        on.mark_install(pkg, extract) 
        on.commit_install()
	
def main():
    usage = _('usage: blank [options] {install | remove | check} package.on file')
    desc = _('blank is a simple command line interface for installing blankon packages.')
    parser = OptionParser(usage=usage, description=desc)
    opts, args = parser.parse_args()

    if not args:
        parser.print_help()
        exit(1)
	
    if len(args)<2:
        parser.print_help()
        exit(1)

    command = args[0]
    am = BlankInstall()

    if command == 'install':
        am.install(args[1:])
    elif command == 'remove':
        am.remove(args[1:])
    elif command == 'check':
        am.check(args[1:])
    else:
        print _('Command {0} is not supported. type -h for help.').format(command)

if __name__ == '__main__':
    main()
